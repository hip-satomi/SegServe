stages:
  - build
  - test

variables:
# When you use the dind service, you must instruct Docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. Docker 19.03 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/services/#accessing-the-services.
  #
  # Specify to Docker where to create the certificates. Docker
  # creates them automatically on boot, and creates
  # `/certs/client` to share between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"

build-docker:
  stage: build
  image: $CI_REGISTRY/satomi/segtrackui/docker:20.10.16
  tags:
    - big-ram
  services:
    - name: $CI_REGISTRY/satomi/segtrackui/docker:20.10.16-dind
      alias: docker
  before_script:
    - docker info
  script:
    - echo $CI_REGISTRY
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export DOCKER_CACHE_IMAGE=$CI_COMMIT_BRANCH
    #- docker pull $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/server:$CI_COMMIT_BRANCH || echo 'No cached image for the branch yet' && docker pull $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/server:$CI_DEFAULT_BRANCH && export DOCKER_CACHE_IMAGE=$CI_DEFAULT_BRANCH || echo 'Not even a default branch'
    - echo "Caching from version $DOCKER_CACHE_IMAGE"
    - docker build --cache-from $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/server:$DOCKER_CACHE_IMAGE -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/server:latest -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/server:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/server:$CI_COMMIT_BRANCH .
    - if [ -d $CI_REGULAR_EXEC ]; then exit; fi
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/server:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/server:$CI_COMMIT_BRANCH
    - if [ "$CI_COMMIT_BRANCH" = "master" ]; then docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/server:latest; fi

# execute the segmentation prediction with a test image
test-online-exec:
  variables:
    SERVICE_LOG_NAME: "/builds/service-logs/logs-${CI_COMMIT_REF_NAME}-${CI_PIPELINE_ID}.txt"
    FF_NETWORK_PER_BUILD: "true"     # activate container-to-container networking
  stage: test
  image: python:3.9.10
  tags:
    - big-ram
  services:
    - name: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/server:$CI_COMMIT_SHORT_SHA
      alias: segserve
      command: ["/bin/bash", "-c", "echo Log dir: ${SERVICE_LOG_NAME}; ls /; ls -all /builds; mkdir -p /builds/service-logs; ls /builds; uvicorn --host 0.0.0.0 --port 80 main:app 2>&1 | tee ${SERVICE_LOG_NAME}"]

  script:
    - echo "Log dir ${SERVICE_LOG_NAME}"
    - |
      (tail -f -n +1 "${SERVICE_LOG_NAME}" | awk '{print "[service-logs]: " $0}' &)
    - pip install requests pillow pytest pytest-xdist
    - python -m pytest --junitxml=report.xml tests/test.py
  artifacts:
    reports:
      junit: report.xml
  after_script:
    - rm ${SERVICE_LOG_NAME}
